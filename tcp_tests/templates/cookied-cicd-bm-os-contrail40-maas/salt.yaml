{% from 'cookied-cicd-bm-os-contrail40-maas/underlay.yaml' import HOSTNAME_CFG01 with context %}
{% from 'cookied-cicd-bm-os-contrail40-maas/underlay.yaml' import LAB_CONFIG_NAME with context %}
{% from 'cookied-cicd-bm-os-contrail40-maas/underlay.yaml' import DOMAIN_NAME with context %}

# Other salt model repository parameters see in shared-salt.yaml

{% import 'shared-salt.yaml' as SHARED with context %}

- description: Wait for salt-master is ready after configdrive user-data
  cmd: |
    timeout 120 salt-call test.ping
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 2, delay: 5}
  skip_fail: false

{{ SHARED.MACRO_INSTALL_SALT_MINIONS() }}

{{SHARED.MACRO_CHECK_SALT_VERSION_SERVICES_ON_CFG()}}

{{SHARED.MACRO_CHECK_SALT_VERSION_ON_NODES()}}

- description: Prepare maas
  cmd: |
    salt-call state.sls maas.cluster;
    salt-call state.sls maas.region;
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 2, delay: 5}
  skip_fail: false

- description: Generate a public key for machines in MAAS
  cmd: |
    ssh-keygen -y -f ~root/.ssh/id_rsa > ~root/.ssh/id_rsa.pub
    maas mirantis sshkeys create key="$(cat ~root/.ssh/id_rsa.pub)"
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

#############################################################
## Prevent registration salt-minions from previous deployment
## to the newly bootstrapped salt-master

- description: Power off all the machines registered to MAAS in the model
  cmd: |
    MACHINES=$(salt-call -l info maas.machines_status | grep system_id -A1|grep "              ")
    for machine in ${MACHINES}; do
      echo "Powering off ${machine} $(maas mirantis machine read ${machine} | grep hostname)";
      maas mirantis machine power-off ${machine} > /dev/null;
    done
    sleep 30
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Wait for power status <off> for all MAAS machines
  cmd: |
    MACHINES=$(salt-call -l info maas.machines_status | grep system_id -A1|grep "              ")
    STATES=""
    for machine in $MACHINES; do
      STATE=$(maas mirantis machine query-power-state ${machine}|grep state)
      STATES="${STATES} ${STATE}"
      echo "Power state of ${machine}: ${STATE}";
    done
    # Test that there is no machines with "on" status
    echo $STATES | grep -qv "on"
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 10, delay: 30}
  skip_fail: false

- description: Remove all the salt-minions and re-register the cfg01 minion
  cmd: |
    salt-key -y -D;
    salt-call test.ping
    sleep 5
    # Check that the cfg01 is registered
    salt-key | grep cfg01
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

## End workaround for unwanted salt-minions
###########################################

- description: Run comissioning of BM nodes
  cmd: |
    salt-call maas.process_machines
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Wait for machines ready
  cmd: |
    salt-call maas.machines_status && timeout 120 salt-call state.sls maas.machines.wait_for_ready
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 7, delay: 5}
  skip_fail: false

- description: Enforce the interfaces configuration defined in the model for servers
  cmd: |
    salt-call state.sls maas.machines.assign_ip;
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: provision the automatically commissioned physical nodes through MAAS
  cmd: |
    salt-call maas.deploy_machines;
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 3, delay: 5}
  skip_fail: false

- description: Wait for machines deployed
  cmd: |
    salt-call maas.machines_status && timeout 300 salt-call state.sls maas.machines.wait_for_deployed
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 6, delay: 5}
  skip_fail: false
