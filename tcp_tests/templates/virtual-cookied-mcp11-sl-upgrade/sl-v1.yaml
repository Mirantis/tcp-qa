{% from 'virtual-cookied-mcp11-sl-upgrade/underlay.yaml' import HOSTNAME_CFG01 with context %}
{% import 'shared-sl-tests.yaml' as SHARED_SL_TESTS with context %}

- description: Check the VIP on mon nodes
  cmd: |
    SL_VIP=`salt-call --out=newline_values_only pillar.get _param:stacklight_monitor_address`;
    echo "_param:stacklight_monitor_address (vip): ${SL_VIP}";
    salt --hard-crash --state-output=mixed --state-verbose=False -C 'mon*' cmd.run "ip a | grep ${SL_VIP}" | grep -B1 ${SL_VIP}
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: true

# Install the StackLight backends
- description: Install elasticsearch
  cmd: salt -C 'I@elasticsearch:server' state.sls elasticsearch.server -b 1
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install influxdb
  cmd: salt -C 'I@influxdb:server' state.sls influxdb -b 1
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install kibana
  cmd: salt -C 'I@kibana:server' state.sls kibana.server -b 1
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install grafana
  cmd: salt -C 'I@grafana:server' state.sls grafana.server -b 1
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install sensu
  cmd:  salt -C 'I@sensu:server and I@rabbitmq:server' state.sls rabbitmq
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Check rabbit status
  cmd: salt -C 'I@sensu:server and I@rabbitmq:server' cmd.run "rabbitmqctl cluster_status"
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install redis
  cmd: salt -C 'I@redis:cluster:role:master' state.sls redis
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install redis2
  cmd: salt -C 'I@redis:server' state.sls redis
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install sensu2
  cmd: salt -C 'I@sensu:server' state.sls sensu -b 1
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install elasticsearch client.service
  cmd: salt -C 'I@elasticsearch:client' state.sls elasticsearch.client.service
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install kibana client.service
  cmd: salt -C 'I@kibana:client' state.sls kibana
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Restart salt.minion service
  cmd: salt -C 'I@kibana:client or I@elasticsearch:client' --async service.restart salt-minion
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install elasticsearch client
  cmd: sleep 10; salt -C 'I@elasticsearch:client' state.sls elasticsearch.client
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install kibana client
  cmd: salt -C 'I@kibana:client' state.sls kibana.client
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

# Restart salt-minion to make sure that it uses the latest Jinja library
- description: Restart salt-minion
  cmd: salt '*' --async service.restart salt-minion; sleep 15
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

# Start by flusing Salt Mine to make sure it is clean
# Also clean-up the grains files to make sure that we start from a clean state
- description: Clean up grains
  cmd: |
    salt "*" mine.flush;
    salt "*" file.remove /etc/salt/grains.d/collectd;
    salt "*" file.remove /etc/salt/grains.d/grafana;
    salt "*" file.remove /etc/salt/grains.d/heka;
    salt "*" file.remove /etc/salt/grains.d/sensu;
    salt "*" file.remove /etc/salt/grains;
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false


# Install collectd, heka and sensu services on the nodes, this will also
# generate the metadata that goes into the grains and eventually into Salt Mine
- description: Install collectd
  cmd: salt '*' state.sls collectd
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

- description: Install heka
  cmd: salt '*' state.sls heka
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 3, delay: 10}
  skip_fail: false

- description: Install sensu
  cmd: salt -C 'I@sensu:client' state.sls sensu
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

# Gather the Grafana metadata as grains
- description: Install grafana collector
  cmd: salt -C 'I@grafana:collector' state.sls grafana.collector
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

# Update Salt Mine
- description: Update salt mine
  cmd: |
    salt "*" state.sls salt.minion.grains;
    salt "*" saltutil.refresh_modules;
    salt "*" mine.update;
    sleep 5;
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

# Update Heka
- description: Update Heka
  cmd: salt -C 'I@heka:aggregator:enabled:True or I@heka:remote_collector:enabled:True' state.sls heka
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

# Update collectd
- description: Update collectd
  cmd: salt -C 'I@collectd:remote_client:enabled:True' state.sls collectd
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

# Update Sensu
- description: Update sensu
  cmd: salt -C 'I@sensu:server' state.sls sensu
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

# Finalize the configuration of Grafana (add the dashboards...)
- description: Finalize Grafana
  cmd: |
    salt -C 'I@grafana:client' --async service.restart salt-minion; sleep 10;
    salt -C 'I@grafana:client' state.sls grafana.client;
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 4, delay: 10}
  skip_fail: true

# (re)Start manually the services that are bound to the monitoring VIP

- description: "re(Start) services"
  cmd: |
    SL_VIP=`salt-call --out=newline_values_only pillar.get _param:stacklight_monitor_address`;
    salt -G "ipv4:$SL_VIP" service.restart remote_collectd;
    salt -G "ipv4:$SL_VIP" service.restart remote_collector;
    salt -G "ipv4:$SL_VIP" service.restart aggregator;
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: true

{{  SHARED_SL_TESTS.MACRO_CLONE_SL_TESTS() }}
{{  SHARED_SL_TESTS.MACRO_CONFIGURE_TESTS() }}
