{% from 'virtual-offline-pike-ovs-dpdk/underlay.yaml' import HOSTNAME_CFG01 with context %}
{% from 'virtual-offline-pike-ovs-dpdk/underlay.yaml' import HOSTNAME_CTL01 with context %}
{% from 'virtual-offline-pike-ovs-dpdk/underlay.yaml' import HOSTNAME_CTL02 with context %}
{% from 'virtual-offline-pike-ovs-dpdk/underlay.yaml' import HOSTNAME_CTL03 with context %}
{% from 'virtual-offline-pike-ovs-dpdk/underlay.yaml' import HOSTNAME_GTW01 with context %}
{% from 'shared-salt.yaml' import IPV4_NET_EXTERNAL_PREFIX with context %}
{% from 'shared-salt.yaml' import IPV4_NET_TENANT_PREFIX with context %}
{% set REPOSITORY_SUITE = os_env('REPOSITORY_SUITE', 'testing') %}
# Install OpenStack control services
{% set DOMAIN_NAME = os_env('DOMAIN_NAME', 'virtual-offline-pike-ovs-dpdk') %}
{% import 'shared-backup-restore.yaml' as BACKUP with context %}
{% import 'shared-salt.yaml' as SHARED with context %}
{% import 'shared-openstack.yaml' as SHARED_OPENSTACK with context %}

{% set DOCKER_LOCAL_REPO = os_env('DOCKER_LOCAL_REPO', 'deb [arch=amd64] http://mirror.mcp.mirantis.local.test/' + REPOSITORY_SUITE + '/docker/xenial xenial stable') %}

- description: Run 'openssh' formula on cfg01
  cmd: salt --hard-crash --state-output=mixed --state-verbose=False
    -C 'I@salt:master' state.sls openssh &&
    salt --hard-crash --state-output=mixed --state-verbose=False
    -C 'I@salt:master' cmd.run "sed -i 's/PasswordAuthentication no/PasswordAuthentication
    yes/' /etc/ssh/sshd_config && service ssh reload"
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 3, delay: 5}
  skip_fail: false

- description: Configure openssh on all nodes
  cmd: salt --hard-crash --state-output=mixed --state-verbose=False -C 'I@linux:system and not cfg01*' state.sls openssh &&
    salt --hard-crash --state-output=mixed --state-verbose=False
    -C 'I@linux:system and not cfg01*' cmd.run "sed -i 's/PasswordAuthentication no/PasswordAuthentication
    yes/' /etc/ssh/sshd_config && service ssh reload"
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 5}
  skip_fail: false

#- description: Upload cirros image on ctl01
#  cmd: salt --hard-crash --state-output=mixed --state-verbose=False 'ctl01*' cmd.run
#    'wget http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-i386-disk.img'
#  node_name: {{ HOSTNAME_CFG01 }}
#  retry: {count: 2, delay: 30}
#  skip_fail: false
#
#- description: Create net04_external
#  cmd: salt --hard-crash --state-output=mixed --state-verbose=False 'ctl01*' cmd.run
#    '. /root/keystonercv3; neutron net-create net04_ext --router:external True --provider:physical_network physnet1 --provider:network_type flat'
#  node_name: {{ HOSTNAME_CFG01 }}
#  retry: {count: 1, delay: 30}
#  skip_fail: false
#
#- description: Create subnet_external
#  cmd: salt --hard-crash --state-output=mixed --state-verbose=False 'ctl01*' cmd.run
#    '. /root/keystonercv3; neutron subnet-create net04_ext {{ IPV4_NET_EXTERNAL_PREFIX }}.0/24 --name net04_ext__subnet --disable-dhcp --allocation-pool start={{ IPV4_NET_EXTERNAL_PREFIX }}.150,end={{ IPV4_NET_EXTERNAL_PREFIX }}.180 --gateway {{ IPV4_NET_EXTERNAL_PREFIX }}.1'
#  node_name: {{ HOSTNAME_CFG01 }}
#  retry: {count: 1, delay: 30}
#  skip_fail: false
#
#- description: Create net04
#  cmd: salt --hard-crash --state-output=mixed --state-verbose=False 'ctl01*' cmd.run
#    '. /root/keystonercv3; neutron net-create net04'
#  node_name: {{ HOSTNAME_CFG01 }}
#  retry: {count: 1, delay: 30}
#  skip_fail: false
#
#- description: Create subnet_net04
#  cmd: salt --hard-crash --state-output=mixed --state-verbose=False 'ctl01*' cmd.run
#    '. /root/keystonercv3; neutron subnet-create net04 {{ IPV4_NET_TENANT_PREFIX }}.0/24 --name net04__subnet --allocation-pool start={{ IPV4_NET_TENANT_PREFIX }}.120,end={{ IPV4_NET_TENANT_PREFIX }}.240'
#  node_name: {{ HOSTNAME_CFG01 }}
#  retry: {count: 1, delay: 30}
#  skip_fail: false
#
#- description: Create router
#  cmd: salt --hard-crash --state-output=mixed --state-verbose=False 'ctl01*' cmd.run
#    '. /root/keystonercv3; neutron router-create net04_router01'
#  node_name: {{ HOSTNAME_CFG01 }}
#  retry: {count: 1, delay: 30}
#  skip_fail: false
#
#- description: Set geteway
#  cmd: salt --hard-crash --state-output=mixed --state-verbose=False 'ctl01*' cmd.run
#    '. /root/keystonercv3; neutron router-gateway-set net04_router01 net04_ext'
#  node_name: {{ HOSTNAME_CFG01 }}
#  retry: {count: 1, delay: 30}
#  skip_fail: false
#
#- description:  Add interface
#  cmd: salt --hard-crash --state-output=mixed --state-verbose=False 'ctl01*' cmd.run
#    '. /root/keystonercv3; neutron router-interface-add net04_router01 net04__subnet'
#  node_name: {{ HOSTNAME_CFG01 }}
#  retry: {count: 1, delay: 30}
#  skip_fail: false
#
- description: sync time
  cmd: salt --hard-crash --state-output=mixed --state-verbose=False '*' cmd.run
    'service ntp stop; ntpd -gq;  service ntp start'
  node_name: {{ HOSTNAME_CFG01 }}
  retry: {count: 1, delay: 30}
  skip_fail: false

- description: Enable local docker repo
  cmd: |
    set -e;
    echo "{{ DOCKER_LOCAL_REPO }}" > /etc/apt/sources.list.d/mcp_docker.list;
    apt-get clean; apt-get update;
  node_name: {{ HOSTNAME_GTW01 }}
  retry: {count: 1, delay: 30}
  skip_fail: false

#- description: Install docker-ce on gtw
#  cmd: salt-call cmd.run 'apt-get install docker-ce -y  --allow-unauthenticated'
#  node_name: {{ HOSTNAME_GTW01 }}
#  retry: {count: 1, delay: 30}
#  skip_fail: false
#
#- description: Enable forward policy on gtw
#  cmd: |
#    set -e;
#    iptables --policy FORWARD ACCEPT;
#  node_name: {{ HOSTNAME_GTW01 }}
#  retry: {count: 1, delay: 30}
#  skip_fail: false
#
#- description: create rc file on cfg
#  cmd: scp -o StrictHostKeyChecking=no ctl01:/root/keystonercv3 /root
#  node_name: {{ HOSTNAME_CFG01 }}
#  retry: {count: 1, delay: 30}
#  skip_fail: false
#
#- description: Copy rc file
#  cmd: scp -o StrictHostKeyChecking=no /root/keystonercv3 gtw01:/root
#  node_name: {{ HOSTNAME_CFG01 }}
#  retry: {count: 1, delay: 30}
#  skip_fail: false

{{ BACKUP.MACRO_WR_NGINX_MASTER() }}
{{ BACKUP.MACRO_BACKUP_BACKUPNINJA() }}
{{ BACKUP.MACRO_BACKUP_XTRABACKUP() }}